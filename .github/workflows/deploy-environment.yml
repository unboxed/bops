---
name: deploy-environment

on:
  workflow_call:
    inputs:
      environment-name:
        type: string
        required: true

concurrency:
  group: ${{ inputs.environment-name }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build-image:
    name: Create and push docker image to ECR for ${{ inputs.environment-name }}
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get github commit sha
        id: github
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/bops_github_deploy_${{ inputs.environment-name }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Expose GitHub Runtime for Docker build
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push ${{ inputs.environment-name }} image to Amazon ECR based github sha
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bops/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.github.outputs.sha }}
          REVISION: ${{ steps.github.outputs.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          DOCKER_BUILDKIT=1 docker buildx build \
            --cache-to type=gha,mode=max \
            --cache-from type=gha \
            --push \
            --build-arg REVISION=$REVISION \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f Dockerfile.production .

  sync-assets:
    name: Compile and sync assets to S3 bucket
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install Node
        uses: actions/setup-node@v6
        with:
          node-version-file: .node-version
      - run: yarn install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/bops_github_deploy_${{ inputs.environment-name }}
          aws-region: eu-west-2

      - name: Compile assets
        env:
          SECRET_KEY_BASE_DUMMY: '1'
        run: |
          bundle exec rake assets:precompile

      - name: Sync assets to S3 bucket
        run: |
          aws s3 sync public/assets s3://bops-${{ inputs.environment-name }}-assets/assets --size-only

  deploy-services:
    name: Deploy service ${{ matrix.service_type }} to ${{ inputs.environment-name }}
    runs-on: ubuntu-24.04
    needs: [build-image, sync-assets]
    strategy:
      matrix:
        service_type: ["console", "worker", "web"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        if: matrix.service_type == 'web'

      - name: Get github commit sha
        id: github
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/bops_github_deploy_${{ inputs.environment-name }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get image URI
        id: ecr-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bops/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.github.outputs.sha }}
        run: |
          echo "uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >>$GITHUB_OUTPUT

      - name: Download task definition for ${{ matrix.service_type }} and strip unused properties
        run: |
          aws ecs describe-task-definition --task-definition bops-${{ matrix.service_type }}-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > ${{ matrix.service_type }}.json

      - name: Generate task definition for ${{ inputs.environment-name }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.service_type }}.json
          container-name: bops
          image: ${{ steps.ecr-image.outputs.uri }}

      - name: Deploy ${{ matrix.service_type }} task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: bops-${{ matrix.service_type }}-${{ inputs.environment-name }}
          cluster: bops-${{ inputs.environment-name }}
          wait-for-service-stability: true
          # used only for web:
          codedeploy-appspec: .aws/appspec.yml
          codedeploy-application: bops-${{ inputs.environment-name }}
          codedeploy-deployment-group: default
