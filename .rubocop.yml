require:
  - rubocop
  - rubocop-rails
  - rubocop-rspec
  - rubocop-performance

AllCops:
  TargetRubyVersion: 2.6.5
  # RuboCop has a bunch of cops enabled by default. This setting tells RuboCop
  # to ignore them, so only the ones explicitly set in this file are enabled.
  DisabledByDefault: true
  Exclude:
    - "**/vendor/**/*"
    - "bin/**/*"
    - "db/**/*"
    - "**/*.gemspec"
    - "node_modules/**/*"

Performance:
  Exclude:
    - "**/test/**/*"

Rails:
  Enabled: true

# Align `when` with `case`.
Layout/CaseIndentation:
  Enabled: true

# Align comments with method definitions.
Layout/CommentIndentation:
  Enabled: true

# Chain methods with trailing dots.
Layout/DotPosition:
  EnforcedStyle: trailing

Layout/ElseAlignment:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for
# assignments, where it should be aligned with the LHS.
Layout/EndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: variable
  AutoCorrect: true

Layout/EmptyLineAfterMagicComment:
  Enabled: true

Layout/EmptyLinesAroundBlockBody:
  Enabled: true

# In a regular class definition, no empty lines around the body.
Layout/EmptyLinesAroundClassBody:
  Enabled: true

# In a regular method definition, no empty lines around the body.
Layout/EmptyLinesAroundMethodBody:
  Enabled: true

# In a regular module definition, no empty lines around the body.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

Layout/FirstArgumentIndentation:
  Enabled: true

# Method definitions after `private` or `protected` isolated calls need one
# extra level of indentation.
Layout/IndentationConsistency:
  Enabled: true
  EnforcedStyle: indented_internal_methods

Layout/LeadingCommentSpace:
  Enabled: true

Layout/LineLength:
  Max: 120
  Exclude:
    - "spec/**/*"

# Just indent parameters by two spaces. It's less volatile if methods change,
# and there's less busy work lining things up.
Layout/ParameterAlignment:
  EnforcedStyle: with_fixed_indentation

Layout/SpaceAfterColon:
  Enabled: true

Layout/SpaceAfterComma:
  Enabled: true

Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

Layout/SpaceAroundKeyword:
  Enabled: true

Layout/SpaceAroundOperators:
  Enabled: true

Layout/SpaceBeforeComma:
    Enabled: true

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

Layout/SpaceBeforeFirstArg:
    Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true
  EnforcedStyleForEmptyBraces: space

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true

Layout/SpaceInsideParens:
  Enabled: true

# Detect hard tabs, no hard tabs.
Layout/Tab:
  Enabled: true

# Blank lines should not have any spaces.
Layout/TrailingEmptyLines:
  Enabled: true

# No trailing whitespace.
Layout/TrailingWhitespace:
  Enabled: true

# Don't allow safe assignment in conditions.
Lint/AssignmentInCondition:
  AllowSafeAssignment: false

Lint/RedundantStringCoercion:
  Enabled: true

# Use my_method(my_arg) not my_method( my_arg ) or my_method my_arg.
Lint/RequireParentheses:
  Enabled: true

Lint/UriEscapeUnescape:
  Enabled: true

# Don't worry about long methods in specs.
Metrics/MethodLength:
  Max: 10
  Exclude:
    - "spec/**/*"

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

# Allow ===. It's useful.
Style/CaseEquality:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

Style/CollectionMethods:
  PreferredMethods:
    inject: "inject"
    reduce: "inject"

# Prefer Foo.method over Foo::method
Style/ColonMethodCall:
  Enabled: true

Style/DefWithParentheses:
  Enabled: true

# Prefer sensible naming to comments everywhere.
Style/Documentation:
  Description: Document classes and non-namespace modules.
  Enabled: false

# Percent-formatting and hash interpolation both have their place. Don't
# enforce any particular one.
Style/FormatString:
  Enabled: false

Style/FrozenStringLiteralComment:
  Enabled: true
  EnforcedStyle: always
  Exclude: []

# It's not really clearer to replace every if with a return if.
Style/GuardClause:
  Enabled: false

# Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.
Style/HashSyntax:
  Enabled: true

# Would enforce do_y if x over if x / do y / end. As with GuardClause above,
# this enforces code organisation that doesn"t necesarily make things clearer.
Style/IfUnlessModifier:
  Enabled: false

# Defining a method with parameters needs parentheses.
Style/MethodDefParentheses:
  Enabled: true

Style/ParenthesesAroundCondition:
  Enabled: true

Style/RedundantFreeze:
  Enabled: true

# Use quotes for string literals when they are enough.
Style/RedundantPercentQ:
  Enabled: true

Style/RedundantReturn:
  Enabled: true
  AllowMultipleReturnValues: true

Style/Semicolon:
  Enabled: true
  AllowAsExpressionSeparator: true

# Check quotes usage according to lint rule below.
Style/StringLiterals:
  Enabled: true
  EnforcedStyle: double_quotes
  Exclude:
    - "spec/**/*"

Style/TrivialAccessors:
  Enabled: true

Performance/FlatMap:
  Enabled: true

Performance/RedundantMerge:
  Enabled: true

Performance/StartWith:
  Enabled: true

Performance/EndWith:
  Enabled: true

Performance/RegexpMatch:
  Enabled: true

Performance/UnfreezeString:
  Enabled: true

# Prefer new-style Rails validators
Rails/Validation:
  Enabled: true
